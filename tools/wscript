# vim: syntax=python:shiftwidth=4:tabstop=4:expandtab

import os,sys,types,re,shutil
from waflib.TaskGen import feature,after_method,before_method,extension
from waflib import Task
from waflib import Logs

def options(opt):
    pass
def build(bld):
    pass
def configure(cnf):
    """
    Try to find all relevant dart tools or raise a :py:class:`waflib.Errors.ConfigurationError`.
    """
    cnf.find_program('dart', var='DART')
    cnf.find_program('dart2js', var='DART2JS')
    cnf.env['DART_JS_BOOTSTRAP'] = cnf.path.find_node('dart.js').abspath()

@feature('dart')
def process_dart(self):
    """
    Create the output folder for the whole dart project output,
    sift through all source files and make them available as nodes
    for later processing.
    """
    self.dartfiles = set()
    self.jsfiles = set()
    self.htmlfiles = set()
    self.cssfiles = set()
    for src in self.source:
        node = self.path.find_node(src)
        if node.suffix() == '.dart':
            self.dartfiles.add(node)
        elif node.suffix() == '.js':
            self.jsfiles.add(node)
        elif node.suffix() == '.html':
            self.htmlfiles.add(node)
        elif node.suffix() == '.css':
            self.cssfiles.add(node)
    self.source = []
    self.outdir = self.path.make_node(self.target + '/').get_bld()
    self.outdir.mkdir()

def compile_dart_file(self, node):
    """
    Compile a dart file to javascript.
    """
    out_source = node.change_ext('.dart.js')
    tsk = self.create_task('dart2jstask')
    tsk.set_inputs(node)
    tsk.set_outputs(out_source)
    self.jsfiles.add(out_source)
class dart2jstask(Task.Task):
    def run(self):
        bld = self.generator.bld
        env = bld.env
        bld.exec_command('{dart2js} {i} -o {o}'.format(
            dart2js=env['DART2JS'],
            i=self.inputs[0].abspath(),
            o=self.outputs[0].abspath()
        ))
        return 0

@feature('dart')
@after_method('process_dart')
@before_method('apply_dart')
def apply_dart2js(self):
    for dartfile in self.dartfiles:
        compile_dart_file(self, dartfile)

@feature('dart')
@after_method('process_dart')
def apply_dart(self):
    """
    Copy over all source files (html, css, dart, js, etc.) to the target
    directory.
    """
    shutil.copyfile(self.env['DART_JS_BOOTSTRAP'], self.outdir.make_node('dart.js').abspath())
    for filetype in ['dartfiles','jsfiles','htmlfiles','cssfiles']:
        files = getattr(self, filetype)
        for f in files:
            if f.is_bld():
                fnode = self.outdir.make_node(f.path_from(self.path.get_bld()))
            elif f.is_src():
                fnode = self.outdir.make_node(f.path_from(self.path.get_src()))
            else:
                raise Exception("I don't know what I'm doing anymore.")
            shutil.copyfile(f.abspath(), fnode.abspath())
